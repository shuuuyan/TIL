【HTTP通信】
Webアプリケーションを表示する際の、情報やデータなどを送受信するための通信方法。
また、HTTP通信でやり取りをする場所を、URLが示しています。

【URL】
URLはインターネットのサービスの場所を表すものです。
インターネット上における「住所」のようなもの。 
URLにアクセスすることで、そのURLにあてはまるWebアプリケーションと通信を行うことができる。
手紙を送るまでに例えると、「HTTP通信が手紙の種類」、「URLが送り先」である。

【リクエスト】
リクエストとは「データや情報を要求すること」。

【レスポンス】
レスポンスとは「リクエストに対応するデータや情報を返却すること」。

【クライアント】
クライアントとは、Webアプリケーションなどのサービスを利用する側、つまり様々な Webアプリケーションを使用している人のことです。

【クライアントサイド】
クライアントが利用する領域のこと。
Webアプリケーションの見た目や、それを表示するブラウザなどを指します。
このようなユーザーに対するサービスの見た目や、使い勝手を考えることを専門とするエンジニアを、
クライアントサイドエンジニア(またはフロントエンドエンジニア)と呼びます。

【サーバー】
サーバーは、画面の無いPCです。 
Webアプリケーションは世界中のどこかに置いてあるサーバーの中に保存されており、
そこに対してインターネットを介して通信することで、サービスが利用できます。

【サーバーサイド】
実際にWebアプリケーションが存在する領域のことです。データなどもサーバーサイドに保存されます。
サーバーサイドにあるWebアプリケーションの仕組みを専門とするエンジニアは、サーバーサイドエンジニアと呼ばれます。
Rubyなどのプログラミング言語を活用して、「ある目的」を持ったプログラムを作成します。

【アプリケーションサーバー】　　　 Webサーバーを通して受け取ったリクエストを処理し、HTMLなどをウェブーバー サーバーへ返却する役割
【ウェブサーバー】 　　　　　　　　　　　　　　　　　リクエストを処理し、レスポンスを返却する役割
【データベースサーバー】　　　　　　　　　アプリケーションで使用するデータを管理する役割

【データベース】
サーバーの中でも、特にデータベースサーバーは大きな役割を担っています。 
データベースサーバーは略してデータベースと呼ばれることが多いです。

【Sinatra】
Sinatraとは、最小の労力でRubyによるWebアプリケーションを作成できる仕組みを構築できるフレームワークのことです。
フレームワークとは「最小のコストでWebアプリケーションの作成ができるような仕組み」のこと。

【requireメソッド】
Rubyのファイルで、Sinatraのような仕組み自体を読み込む際に使用する記述です。 
「require '読み込む対象' 」と記述すると読み込むことができ、「読み込む対象」の処理を、記述したRubyファイルで使用できるようになります。

# PCにインストールしたSinatraをmyApp.rbに読み込む
require 'sinatra

【ルーティング】
ルーティングとは、リクエストに対してどのような処理を実行するかという道筋を明記する仕組みです。

【HTTPメソッド】
HTTPメソッドとは、HTTP通信における処理の種類のことを指します。
HTTP通信とは、Webアプリケーションを表示する際の、情報やデータなどを送受信するための通信方法。
Webアプリケーションで使用する処理の種類ごとに8つの種類が存在します。
HTTP通信の中で行いたい処理の種類をHTTPメソッドという。

以下、頻繁に使用する4つのHTTPメソッド。
ーメソッドー 　　ー処理ー
　　　　GET 　　　　　　　　　　取得する
　　　　POST 　　　　　　　　送信する、作成する
　　　　PUT 　　　　　　　　　　更新する、作成する
　　　　DELETE 　　　　削除する

【フレームワーク】
Sinatraをのように、最小のコストでWebアプリケーションの作成ができるような仕組みをフレームワークといいます。 
Webアプリケーション開発で、「必要となる作業やリソースを事前に仮定し、用意してある便利なもの」という理解。

【Ruby on Rails】
Ruby on Railsは、主に2つの理念から構成されているフレームワークです。 この理念は非常に深い意味がある。
DRYとCoCの理念に則って作成する、Rubyのフレームワーク。

⑴ DRY(Don`t Repeat Yourself)
同じコードを繰り返し書くことを避け、保守管理しやすい状態に保ちバグを減らす。

⑵ CoC(Convention Over Configuration)
Ruby on Rails自体で規約を用意しているため、規約に則ったコードを書くことで記述量を少なくすることができ、スピーディーな開発が可能。
このように、シンプルに扱いやすさを求めることができるフレームワークといえる。

【Ruby on Railsの特徴】
・ 設計ルールがしっかり決まっているため、ルールにしたがってシンプルに記述できる。
・ 様々な開発ツールがある。
・ 日本語の参考文献が多い。
　→ スピーディーに開発を行うことができる。
 
 Railsは非常に開発効率が高いことが特徴のフレームワーク。 ベンチャー企業におけるスピードが求められる開発や、アプリケーションの試作品などに使われる。
