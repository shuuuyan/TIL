【irb (interactive Ruby)】
irbコマンドは、ターミナルから直接プログラムを動かすことができる機能を起動します。

【文字列の連結】
文字列を連結させるには、文字列同士を「＋(プラス)」で繋ぐ。
"Hello!" + "brother!"

【メソッド】
プログラムにおける何かしらの処理をまとめたもの。

【lengthメソッド】
文字列の文字数を数えてくれる。

```ターミナル
% irb
irb(main):001:0> "good morning".length
=> 12
irb(main):002:0> "こんにちは"
=> "こんにちは"
```

【代理演算子】
+　(足し算)　-(引き算)　＊(掛け算)　/(わり算)　%(剰余[割った余り])

【to_sメソッド】
数字を文字列に変換
irb(main):009:0> 20.to_s
=> "20"

【to_iメソッド】
文字列を数字に変換

【変数】
値を入れる箱。箱には名前をつけられる。
変数を利用することで、変数の名前を使うだけで呼び出すことが可能。

【代入】
変数の後の=(イコール)は数学の方程式の等しいと言う意味ではなく、「変数の箱の中に値を入れる」という意味。
= →  代入演算子

irb(main):018:0> p = 3.14159
=> 3.14159
irb(main):019:0> p
=> 3.14159

【自己代入演算子】
自身に代入すること。省略可能。
number = number +1        →    number += 1

irb(main):026:0> number = 3
=> 3
irb(main):027:0> number = number + 1 
=> 4

【getsメソッド】
Rubyに用意された、ターミナルに値の入力機能を起動するメソッドです。
ターミナルで入力された値は文字列としてプログラムに渡されます。
getsコードを記述することでターミナル画面は入力待ちの状態になる。
エンターを押すと、getsメソッドは入力した文字列にプログラムを返す。

　【バックスラッシュ記法】
 改行やタブを行うようになる。(必ずダブルクォーテーションで囲う)
 「option + ¥」 で打つことができる。
puts "改行したい改行したい\n改行した"

【chompメソッド】
chompメソッドは文字列が使用できるメソッドです。
chompメソッドを使用すると、文字列の末尾に存在する改行を取り除いた文字列を返してくれます。
input = gets.chomp
puts "入力した値は#{input}です"

puts "ようこそ!名前を入力してください"
name = gets.chomp
puts "秒数を知りたい時間を分単位で入力してください"
minutes = gets.to_i
seconds = minutes * 60
puts "#{name}さん、#{minutes}分は#{seconds}秒です!"

【配列】
配列は、1つの変数で複数の値を持つことができる値です。(引き出しのようなロッカーをイメージ)
データを入れるとデータと順番が紐づけられる。

【配列に値を追加 配列演算子(<<)】
配列演算子とは、配列に対して様々な処理を行う演算子のこと。
追加する際は　　　　　　　配列<<追加する要素　　　　　と記述。

【配列の値を取得　　添字】
添字とは配列の各要素に割り振られた番号のこと。
添字は「0」から始まる。

変数 = 配列[添字]

【ハッシュ】
ハッシュは「データ」とそれに対する「名前」のセットを要素として持つ値。
ハッシュにおいてはデータを「バリュー」、それに対する名前を「キー」と呼ぶ。
このようにキーとバリューで管理するこ方式をバリューストアと呼ぶ。
変数 = { キー1 => バリュー1, キー2 => バリュー2, キー3 => バリュー3 }

ハッシュのキーは「シンボル」という値が使用される。

【シンボル】
シンボルは、見た目文字列だが実際の中身は数値になっている。
シンボルの宣言は、文字列の先頭に「:(コロン)」をつける。

:"文字列"　　# どちらも同じ値
:文字列 # よく使用される　　　　 

 # 以下はどちらも同じ要素
hash = { :name => "Taro" }
hash = { name: "Taro" } # よく使用される。
 
【比較演算子(>, >=, <, <=, ==)】
比較演算子は、値同士を比較したいときに使用します。 書き方はシンプルで、値と値の間に演算子を記述するだけです。
ー使い方ー　　　　　　ー説明ー
A > B　　　　　　 AはBより大きいか
A >= B　　　　　　AはB以上か
A < B　　　　　　　　AはBより小さいか
A <= B　　　　　　AはB以下か
A == B　　　　　　AとBは等しいか

【true, false】
trueとfalseは、式が真か偽かを扱う真偽値という値のこと。

【論理演算子(!)】
式の真偽の確認や、真偽値に対しての演算を行うことができる演算子。
「!(エクスクラメーションマーク) 」は not演算子 と呼ばれ、否定の意味で使われます。
この仕組みで、「もし〇〇だったら△△をする」と処理を分けることができる。
!と=を合わせた!=は、==と反対の意味で 値同士が等しくない 場合にtrueを返します。

【条件分岐処理】
条件分岐処理とは、条件を満たしているかどうかで実行内容を分岐する処理。
分岐の条件として記述する式を 「条件式」と呼ぶ。

【繰り返し処理】
繰り返し処理とは、同じ内容を繰り返し行う処理です。「ループ処理」とも呼ばれます。
この仕組みで、処理の記述は1度だけで、繰り返すことができます。

【timesメソッド 】
timesとは、指定した回数だけ繰り返し処理を行えるメソッドのことです。
以下のように記述して使用します。
 数値.times do |ブロック変数|
 # 繰り返す処理内容
end
