【Ruby on Rails】
Ruby on Railsは、主に2つの理念から構成されているフレームワークです。 この理念は非常に深い意味がある。
DRYとCoCの理念に則って作成する、Rubyのフレームワーク。

⑴ DRY(Don`t Repeat Yourself)
同じコードを繰り返し書くことを避け、保守管理しやすい状態に保ちバグを減らす。

⑵ CoC(Convention Over Configuration)
Ruby on Rails自体で規約を用意しているため、規約に則ったコードを書くことで記述量を少なくすることができ、スピーディーな開発が可能。
このように、シンプルに扱いやすさを求めることができるフレームワークといえる。

【Ruby on Railsの特徴】
・ 設計ルールがしっかり決まっているため、ルールにしたがってシンプルに記述できる。
・ 様々な開発ツールがある。
・ 日本語の参考文献が多い。
　→ スピーディーに開発を行うことができる。
 
 Railsは非常に開発効率が高いことが特徴のフレームワーク。 ベンチャー企業におけるスピードが求められる開発や、アプリケーションの試作品などに使われる。

【railsコマンド】
Railsに関する命令は、すべて rails というコマンドから始まります。
「rails コマンド名」 とすることで、さまざまな動作を実行できます。

【rails newコマンド】
Railsで新規アプリケーションを作成する際に使用します。
このコマンドを実行することで、Railsアプリケーションの雛形が作成されます。
% rails new アプリケーション名

【-dオプション】
-d オプションは、rails newコマンドにつけることができるオプションです。
-d オプションをつけると、作成するアプリが利用するデータベースの管理システムの種類を指定できます。
【例】　　　% rails new アプリケーション名 -d mysql

【rails db:createコマンド】
新しくデータベースを作成するには rails db:create というコマンドを実行します。
　% rails db:create

【Sequel Pro(シークエル・プロ)】
Sequel Proはデータベースの中身をわかりやすく視覚化して表示するアプリケーションです。 
このアプリケーションを使用することで、データベースを視覚的に操作でき、より簡単に管理できます。

【rails sコマンド】
このコマンドをアプリケーションのディレクトリで実行すると、アプリケーションを動かすためのサーバーが起動します。

【MVC(エム・ブイ・シー)】
Railsで登場する、モデル/ビュー/コントローラーという役割の総称です。
Railsをはじめ とするWebアプリケーションシステムの処理の構造を表しています。

【rails gコマンド】
Railsアプリに追加で必要なファイルなどを生成するために使用するコマンドです。
rails g に続けて、生成したいファイルの種類とファイル名を記述します。g は英語で「生成する」を意味するgenerateの略です。
% rails g ファイルの種類 生成するファイル名

【rails g controllerコマンド】
コントローラーやそれに付随するファイルを一度に作成してくれるコマンドです。
% rails g controller コントローラー名

【rails dコマンド】
rails g コマンドで生成したファイル一式をすべて削除するコマンドです。つま
り、 rails d コマンドは、 rails g コマンドとは逆の動作を行うものと言えます。
% rails d ファイルの種類 削除するファイル名

【ERB】
ERBは、テンプレートエンジンと呼ばれる仕組みを持ったものの1つです。 
テンプレートエンジンとは、雛形となるテンプレートと、そのテンプレートにデータとなる記述を埋め込むことで、
最終的に別のファイルとして生成できる仕組みのことです。
ERBは「Embedded Ruby」の略です。拡張子には、.erbを使用します。

【○○.html.erbファイル】
RailsにおけるERBファイルは、 「○○.html.erb」 という名前で作成します。 
○○には、対応するアクション名を記入します。ビューとしての役割を持つため、ビューファイルと呼びます。

【Rubyコードの埋め込み　<% %> 】
ERBファイルでは、Rubyのコードを使用するためのタグが用意されています。
以下のように <%= %> というタグでRubyのコードを囲うことで、そのコードの結果を HTMLに埋め込むことができます。
画面上に表示をさせなくても良いRuby記法(if文や、each文など)の場合に は、 = を抜いて <% %> でコードを囲います。

【テーブル】
テーブルとは、データベース内に作成される、データを表形式で収納する場所です。
データベースには、そのままデータを直接保存することはできない仕組みになっています。
データベースに目的に沿ったテーブルを用意し、テーブルにデータを保存して管理します。

【レコードとカラム】
表形式のテーブルにおいて、「行はレコード」、「列はカラム」と表現します。

【rails g modelコマンド】
モデルやそれに付随するファイルを一度に作成してくれるコマンドです。以下のような形
で実行します。
% rails g model モデル名

【マイグレーション】
マイグレーションは、テーブルの設計図・仕様書です。どのようなテーブルにするのかをマイグレーションファイル内へ記載します。
テーブルとは、データベース内に作成される、データを表形式で収納する場所です。

【カラムの型】
カラム名を指定するとともに、そこにどんなデータが入るのかを示す「型」も指定する必要があります。Rubyに値の種類があったことと同じような考え方です。

(カラムの型)　　(説明)　　　　　　　　　　　　　(用途)
integer　　　　数値 　　　　　　　　　　　　　金額、回数など
string 　　　　文字(短文) 　　ユーザー名、メールアドレスなど
text    　　文字(長文) 　　投稿文、説明文など
boolean　　　　真か偽か　　　　　　　　はい・いいえの選択、合格、不合格のフラグなど
datetime　　日付と時刻　　　　　作成日時、更新日時など

【rails db:migrateコマンド】
マイグレーションに記述した内容を、データベースに適用するためのコマンドです。

【rails db:rollbackコマンド】
マイグレーション実行による変更を差し戻すためのコマンドです。 
「ロールバック→マイグレーションファイルの修正→マイグレート」で、テーブルを修正できます。

【rails db:migrate:statusコマンド】
マイグレーションが実行済みであるかをファイルごとに調べるコマンドです。
状態をあらわすステータスには、 up と down の2種類があります。 実行済みのファイルは up と表示されるため、修正するためにはロールバックする必要が あります。適用されていないときは、 down と表示され、そのまま修正や削除が可能で す。

【コンソール】
コンソールとは、ターミナルからアプリケーションの操作をする仕組みです。 irbもコンソールのひとつと言えます。

【rails cコマンド】
コンソールを起動するコマンドです。
Railsアプリのディレクトリで 「rails c」　を使用することで、そのRailsアプリをコンソール から操作できます。
% rails c

【saveメソッド】
モデルが使用できるインスタンスメソッドです。 使用すると、そのモデルが対応するテーブルにレコードを保存します。

【ActiveRecordメソッド】
モデルがテーブル操作に関して使用できるメソッドの総称です。 テーブルに情報を保存したり取得するために使用します。
インスタンスの情報をレコードとしてテーブルに保存するsaveメソッドも、ActiveRecordメソッドのひとつ。

（メソッド）　　　　　　　　　　　　　　　　　　　　　　　　　　　（用途）
all 　　　　　　　　　　　テーブルのすべてのデータを取得する
find 　　　　　　　　　テーブルのレコードの内、ある1つのデータを取得する
new 　　　　　　　　　　　クラスのインスタンス(レコード)を生成する
save 　　　　　　　　　クラスのインスタンス(レコード)を保存する

【ヘルパーメソッド】
Railsにおける、主にビューでHTMLタグを出現させたりテキストを加工するために使用するメソッドの総称。

(ヘルパーメソッド)        (使用用途)
form_with        投稿ページなどにおけるフォームの実装
link_to        　　　　リンクの実装

ヘルパーメソッドの利点　→ 1. パスの指定やRubyの埋め込みなどの記述がシンプルになるため
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　2. セキュリティ上の問題を解消するため
                                      
【form_withに指定する引数】                                   
(オプション名) 　　　　　　　　　　　　(説明)
urlオプション 　　　　　　　 フォームの情報を送るリクエストのパスを指定
methodオ    　　　　　　　　フォームの情報を送るリクエストのHTTPメソッドを指定。オプションの初期値オプション は :post なので、 post メソッドを指定する場合は省略することが可能
localオプ ション　　　　　リモート送信を無効にするかどうかを指定。trueにすると無効になる

【フォーム部品のヘルパーメソッド】
(フォーム部品のヘルパーメソッド)      (用途例)
text_field　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　1行のテキストボックス
password_field　　　　　　　　　　　　　　　　　　　　　　　　　　　　パスワード入力ボックス(入力したテキストがアスタリスクなどに置 き換えて表示される)
check_box 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　チェックボックス(複数選択可能)
radio_button 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　ラジオボタン(複数の中から1つしか選択できない)
submit　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　送信ボタン

【link_toメソッド】
リンクを作成するためのヘルパーメソッドです。HTMLのaタグの代わりに使用できます。 ビューファイルでは、以下のように記述します。
タグとして出力するため、 <%= %> で囲う必要があります。
<%= link_to 'リンクに表示する文字', 'リンク先のURL' %>

